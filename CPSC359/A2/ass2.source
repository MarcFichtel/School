//////////////////////////////////////////////////////
//CPSC 359
// Assignment 2
// Students:
// ~ Marc-Andre Fichtel, 30014709
// ~ Cardin Chen, 10161477
//
// TODOs
// * Check how to pass more than 4 args to the print function (for printing summary)
// * UAMT I/O
// * Check if &f is the correct placeholder for floats in strings
// * Check if align statements in data section are correct and work as intended
//
// Assembly program does the following:
// ~ Draws objects using asterisks
// ~ Calculates the total number of asterisks
// ~ Calculates the mean of asteri sks grouped by object
//
// Register usage
// ~  r4 = menu choice
// ~  r5 = width input (for squares and rectangles)
// ~  r6 = height input (for rectangles and triangles)
// ~  r7 = used for various statistics
// ~  r8 = used for various memory addresses of statistics
//////////////////////////////////////////////////////

.section 	.init
.global 	_start

_start:
	B 	main

.section 	.text

main:
	// Start program (as seen on lecture slides)
	MOV 	sp, #0x8000 					// Establish stack pointer
	BL 	EnableJTAG 					// Enable JTAG
	BL InitUART 					// Enable UART

	// Print names
	LDR 	r0, =authors 		// load 'author' string into register
	bl 		stringBitCount 	// branch to count bits & print

start:
	LDR 	r0, =instrct 			// Print instruction
	bl 		stringBitCount 		// branch to ascii-to-bit counter

	// Get input and move it into into r4
	MOV   r0, r4 						// create buffer ?? *** is the line 4 below this needed then
	MOV 	r1, #64 					// buffer 8 bytes to read from *** how large should we buffer?
	bl 		ReadLineUART
	STR 	r0, r4 						// store value read into r4 to work with *** str or mov?

	// Validate input
	CMP 	r4, #-1 					// If menu choice = -1...
	B.EQ 	summary 					// Go to summary...
	B.LT 	error1 						// Or to error1, if menu choice < -1

	CMP 	r4, #1 						// Else if menu choice = 1...
	B.EQ 	square 						// Go to square

	CMP 	r4, #2						// Else if menu choice = 2...
	B.EQ 	rect 						// Go to rect(angle)

	CMP 	r4, #3 						// Else if menu choice = 3...
	B.EQ 	triangle 					// Go to triangle...
	B.LT 	error1 						// Or to error1, if menu choice > 3

	CMP 	r4, 0x71 					// Else if menu choice = q (in hex --> 01110001 in binary)...
	B.EQ 	exit 						// Go to exit

	B 	error2 						// Else go to error2 (menu choice was not -1, 1, 2, 3, or q)

error1:
	// Print error1, then return to start menu
	//TODO
	B 	start 						// Return to menu

error2:
	// Print error2, then return to start menu
	//TODO
	B 	start 						// Return to menu

square:
	// Print square width input instruction
	// TODO

	// Get square width input into r5
	// TODO

	// Validate square width input
	CMP 	r5, #3 						// If width < 3...
	B.LT 	error3 						// Go to error3
	CMP 	r5, #9 						// Else if width > 9...
	B.GT 	error3 						// Go to error3

	// Draw square asterisks
	MOV 	r0, r5 						// r0 = r5 (width)
	MOV 	r1, r5 						// r1 = r5 (width)
	B 	drawTest1 					// Go to drawTest1

draw11:
	SUB 	r0, r0, #1 					// r0--
	MOV 	r1, r5 						// r1 = r5 again
	// print starEnd
	B 	drawTest1 					// Go to drawTest1

draw12:
	SUB 	r1, r1, #1 					// r1--
	// print star

drawTest1:
	CMP 	r0, #1 						// If r0 < 1...
	B.LT 	next1 						// Go to draw11
	CMP 	r1, #1 						// If r1 > 1...
	B.GT 	draw12 						// Go to draw12
	B 	draw11 						// Else go to draw11

next1:
	// Store square info for summary computation
	LDR 	r8, =numSquares 				// Get numSquares address
	LDR 	r7, [r8] 					// Load number of squares into r7
	ADD 	r7, r7, #1 					// Increment # of squares
	STR 	r7, [r8] 					// Store incremented number of squares back into memory

	LDR 	r8, =numSquareStars				// get numSquareStars address
	LDR 	r7, [r8]					// load number of square stars into r7
	LSL 	r5, r5, #1 					// r5 = r5 * 2^1
	ADD 	r7, r7, r5 					// Add new square asterisks to # of square asterisks
	STR 	r7, [r8] 					// Store new number of square stars back into memory

	B 	start 						// Return to menu

rect:
	// Print rectangle width input instruction
	// TODO

	// Get rectangle width input
	// TODO

	// Validate rectangle width input
	CMP 	r5, #3 						// If width < 3...
	B.LT 	error3 						// Go to error3
	CMP 	r5, #9 						// Else if width > 9...
	B.GT 	error3 						// Go to error3

	// Print rectangle height input instruction
	// TODO

	// Get rectangle height input
	// TODO

	// Validate rectangle height input
	CMP 	r6, #3 						// If height < 3...
	B.LT 	error3 						// Go to error3
	CMP 	r6, #9 						// Else if height > 9...
	B.GT 	error3 						// Go to error3

	// Draw rectangle asterisks
	MOV 	r0, r5 						// r0 = r5 (width)
	MOV 	r1, r6 						// r1 = r6 (height)
	B 	drawTest2 					// Go to drawTest2

draw21:
	SUB 	r0, r0, #1 					// r0--
	MOV 	r1, r6 						// r1 = r6 again
	ADRP 	r0, starEnd					// Get string high bits
	ADD 	r0, r0, :lo12:starEnd 				// Get string low bits
	BL 	printf 						// Print string
	B 	drawTest2 					// Go to drawTest2

draw22:
	SUB 	r1, r1, #1 					// r1--
	ADRP 	r0, star					// Get string high bits
	ADD 	r0, r0, :lo12:star 				// Get string low bits
	BL 	printf 						// Print string

drawTest2:
	CMP 	r0, #1 						// If r0 < 1...
	B.LT 	next2 						// Go to next2
	CMP 	r1, #1 						// If r1 > 1...
	B.GT 	draw22 						// Go to draw22
	B 	draw21 						// Else go to draw21

next2:
	// Store rectangle asterisks for summary computation
	LDR 	r8, =numRects 					// Get numRects address
	LDR 	r7, [r8] 					// Load numRects into r7
	ADD 	r7, r7, #1 					// Increment # of rectangles
	STR 	r7, [r8] 					// Store incremented numRects back into memory

	LDR 	r8, =NumRectStars 				// Get numRectStars address
	LDR 	r7, [r8] 					// Load numRectStars into r7
	MLA 	r7, r5, r6, r7					// r7 += r5 * r6
	STR 	r7, [r8] 					// Store new numRectStars back into memory

	B 	start 						// Return to menu

triangle:
	// Print triangle height input instruction
	// TODO						// Print string

	// Get triangle height input (Check: Is this how we measure triangles???)
	// TODO

	// Validate triangle height input
	CMP 	r6, #3 						// If height < 3...
	B.LT 	error3 						// Go to error3
	CMP 	r6, #9 						// Else if height > 9...
	B.GT 	error3 						// Go to error3

	// Draw triangle asterisks
	MOV 	r0, r6 						// r0 = r5 (height)
	MOV 	r1, r6 						// r1 = r6 (height)
	B 	drawTest3 					// Go to drawTest3

draw31:
	SUB 	r0, r0, #1 					// r0--
	MOV 	r1, r0 						// r1 = r0
	ADRP 	r0, starEnd					// Get string high bits
	ADD 	r0, r0, :lo12:starEnd 				// Get string low bits
	BL 	printf 						// Print string
	B 	drawTest2 					// Go to drawTest3

draw32:
	SUB 	r1, r1, #1 					// r1--
	ADRP 	r0, star					// Get string high bits
	ADD 	r0, r0, :lo12:star 				// Get string low bits
	BL 	printf 						// Print string

drawTest3:
	CMP 	r0, #1 						// If r0 < 1...
	B.LT 	next3 						// Go to next3
	CMP 	r1, #1 						// If r1 > 1...
	B.GT 	draw32 						// Go to draw32
	B 	draw31 						// Else go to draw31

next3:
	// Store triangle asterisks for summary computation
	LDR 	r8, =numTris 					// Get numTris address
	LDR 	r7, [r8] 					// Load numTris into r7
	ADD 	r7, r7, #1 					// Increment # of triangles
	STR 	r7, [r8] 					// Store incremented numTris back into memory

	LDR 	r8, =numTriStars 				// Get numTriStars address
	LDR 	r7, [r8] 					// load numTriStars into r7
loop:								// # of triangle asterisks = factorial(r6):
	ADD 	r7, r7, r6 					// # of triangle asterisks += height
	SUB 	r6, r6 #1 					// height--
	CMP 	r6, #1						// If height >= 1...
	B.GE 	loop 						// Go to loop

	ADD 	r7, r7, r0 					// Add new triangle asterisks to # of triangle asterisks
	STR 	r7, [r8] 					// Store new numTriStars back into memory
	B 	start 						// Return to menu

	// Print error3, then return to start menu
error3:
	// TODO
	B 	start 						// Return to menu

summary:
	// Compute total number of asterisks into r1 (first arg)
	LDR 	r8, =numSquareStars 				// Get numSquareStars address
	LDR 	r7, [r8]					// Load numSquareStars into r7
	MOV 	r1, r7 						// r1 = r7 (# square asterisks)
	LDR 	r8, =numRectStars				// Get numRectStars address
	LDR 	r7, [r8]					// Load numRectStars into r7
	ADD 	r1, r1, r7 					// r1 += r7 (# rectangle asterisks)
	LDR 	r8, =numTriStars				// Get numTriStars address
	LDR 	r7, [r8]					// Load numTriStars into r7
	ADD 	r1, r1, r7 					// r1 += r7 (# trianle asterisks)

	// Compute mean of square asterisks (second arg)
	LDR 	r8, =numSquareStars 				// Get numSquareStars address
	LDR 	r2, [r8]					// Load numSquareStars into r2
	LDR 	r8, =numSquares 				// Get numSquares address
	LDR 	r7, [r8]					// Load numSquares into r7
	DIV 	r2, r2, r7 					// r2 /= r7

	// Compute mean of rectangle asterisks (third arg)
	LDR 	r8, =numRectStars 				// Get numRectStars address
	LDR 	r3, [r8]					// Load numRectStars into r3
	LDR 	r8, =numRects 					// Get numRects address
	LDR 	r7, [r8]					// Load numRects into r7
	DIV 	r3, r3, r7 					// r3 / r7

	// Compute mean of triangle asterisks (fourth arg)
	// TODO Check if r4 can be used to pass an arg for printing
	LDR 	r8, =numTriStars 				// Get numTriStars address
	LDR 	r4, [r8]					// Load numTriStars into r4
	LDR 	r8, =numTris 					// Get numTris address
	LDR 	r7, [r8]					// Load numTris into r7
	DIV 	r4, r4, r7 					// r4 /= r7

	// Display summary, then return to start menu
	// TODO
	B 	start 						// Return to menu


stringBitCount: // counts number of bits  to buffer for any given particular string
	push {lr}
	mov 	r1, #0 		// reset loop counter
	mov 	r2, r0 		// move print address into temp Register

loopCounter:
	ldrb 		r3, [r2], #1 			// load byte into memory
	cmp 		r3, #0 						// compare current byte to null
	addne 	r1, #1  					// if not equal, loop++
	bne 		loopCounter
	bl 			WriteStringUART 	// when done counting, print out r1 amount of buffer
	pop 		{pc}

exit:
	// Print exit message, then exit program
	// TODO
haltLoop$:
	B 	haltLoop$ 					// Infinite loop at end ensures cmd prompt remains open after termination

.section 	.data
.align 4 							// Align to doubleword boundary for strings (???)
authors: 	.asciz 	"Created by Marc-Andre Fichtel and Cardin Chen\n"
instrct: 	.asciz 	"Please enter the number of objects you want to draw.\nPress -1 for Summary or q to exit\n1: Square --- 2: Rectangle --- 3: Triangle\n"
instrctEr1: 	.asciz 	"Invalid choice, input must be between 1 and 3, or -1 for Summary\n"
instrctEr2: 	.asciz 	"Wrong format, only q is allowed to exit the program\n"
widInstrct: 	.asciz 	"Please enter width (must be between 3 and 9)\n"
higInstrct: 	.asciz 	"Please enter height (must be between 3 and 9)\n"
dimError: 	.asciz 	"Invalid choice, input must be between 3 and 9\n"
star: 		.asciz 	"* "
starEnd: 	.asciz 	"*\n"
summ: 		.asciz 	"Total number of stars: %d\nMean of stars used to draw squares: %f\nMean of stars used to draw rectangles: %f\nMean of stars used to draw triangles: %f\n"
fmtDone: 	.asciz 	"Exiting program...\n"

.align 								// Align to integers (???)
numSquares: 	.int 	0
numSquareStars: .int	0
numRects:	.int 	0
numRectStars:	.int	0
numTris: 	.int	0
numTriStars:	.int 	0
